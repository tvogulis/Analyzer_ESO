# Generated by Django 5.0.4 on 2024-05-01 21:30

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MainPrices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True, verbose_name='DateTime')),
                ('price_kwh', models.FloatField(help_text='Price for recovered kWh', null=True, verbose_name='Price kWh')),
                ('price_kw', models.FloatField(help_text='Price for power rate per kW', null=True, verbose_name='Price kW')),
                ('price_percent', models.IntegerField(help_text='Percent of kWh', null=True, verbose_name='Percent of kWh')),
                ('supplier_price', models.FloatField(help_text='Price kWh if need to buy from supplier', null=True, verbose_name='Price kWh buy')),
                ('supplier_price_day', models.FloatField(help_text='Price kWh if need to buy from supplier day tariff', null=True, verbose_name='Price kWh buy day')),
                ('supplier_price_night', models.FloatField(help_text='Price kWh if need to buy from supplier night tariff', null=True, verbose_name='Price kWh buy night')),
                ('sell_price', models.FloatField(help_text='Price kWh if need to sell to supplier', null=True, verbose_name='Price kWh sell')),
                ('plant_power', models.FloatField(default=0, help_text='PV plant power kW at ESO', null=True, verbose_name='Plant power kW')),
            ],
        ),
        migrations.CreateModel(
            name='NordPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nord_pool_csv_file', models.FileField(upload_to='nord_pool/%Y/%m/')),
            ],
        ),
        migrations.CreateModel(
            name='NordPoolData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(null=True, verbose_name='DateTime')),
                ('price', models.FloatField(help_text='Nord Pool price of MWh', null=True, verbose_name='Price')),
            ],
        ),
        migrations.CreateModel(
            name='CsvFileUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('csv_file', models.FileField(upload_to='uploads/%Y/%m/')),
                ('description', models.CharField(max_length=255, null=True, verbose_name='Description')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Calculations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True, verbose_name='DateTime')),
                ('sum_p_plus', models.IntegerField(null=True, verbose_name='P+')),
                ('sum_p_minus', models.IntegerField(null=True, verbose_name='P-')),
                ('sum_q_plus', models.IntegerField(null=True, verbose_name='Q+')),
                ('sum_q_minus', models.IntegerField(null=True, verbose_name='Q-')),
                ('pv_generated', models.IntegerField(default=0, verbose_name='PV')),
                ('csv_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eso_analyzer.csvfileupload')),
            ],
        ),
        migrations.CreateModel(
            name='IndividualPrices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True, verbose_name='DateTime')),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('price_kwh', models.FloatField(help_text='Price for recovered kWh', null=True, verbose_name='Price kWh')),
                ('price_kw', models.FloatField(help_text='Price for power rate per kW', null=True, verbose_name='Price kW')),
                ('price_percent', models.IntegerField(help_text='Percent of kWh', null=True, verbose_name='Percent of kWh')),
                ('supplier_price', models.FloatField(help_text='Price kWh if need to buy from supplier', null=True, verbose_name='Price kWh buy')),
                ('supplier_price_day', models.FloatField(help_text='Price kWh if need to buy from supplier day tariff', null=True, verbose_name='Price kWh buy day')),
                ('supplier_price_night', models.FloatField(help_text='Price kWh if need to buy from supplier night tariff', null=True, verbose_name='Price kWh buy night')),
                ('sell_price', models.FloatField(help_text='Price kWh if need to sell to supplier', null=True, verbose_name='Price kWh sell')),
                ('plant_power', models.FloatField(default=0, help_text='PV plant power kW at ESO', null=True, validators=[django.core.validators.MinValueValidator(0, 'PV power can not be negative')], verbose_name='Plant power kW')),
                ('csv_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eso_analyzer.csvfileupload')),
            ],
        ),
        migrations.CreateModel(
            name='PandasStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power_kw', models.IntegerField(null=True, verbose_name='Power')),
                ('date_time', models.DateTimeField(null=True, verbose_name='DateTime')),
                ('energy_type', models.CharField(max_length=2, null=True, verbose_name='Type')),
                ('consumption_kwh', models.FloatField(null=True, verbose_name='Consumption')),
                ('csv_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eso_analyzer.csvfileupload')),
            ],
        ),
    ]
